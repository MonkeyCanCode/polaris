#!/usr/bin/env bash
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

set -e

dir=${0%/*}
repair=false
for arg in "$@"; do
  if [ "$arg" == "--repair" ]; then
    repair=true
    shift
    break
  fi
done

# --- Client Setup Logic ---

# Check if the python client needs regeneration
if [ "$repair" == true ] || [ ! -f "${dir}/client/python/polaris/catalog/__init__.py" ]; then
  echo "--> Regenerating Python client from specification..."
  "${dir}/gradlew" regeneratePythonClient
fi

# Check if the virtual environment needs to be created or repaired
if [ ! -d "${dir}"/polaris-venv ] || [ "$repair" == true ]; then
  rm -f "${dir}/client/python/poetry.lock"
  if [ ! -d "${dir}/polaris-venv" ]; then
    echo "--> Performing first-time setup for the Python client..."
    python3 -m venv "${dir}"/polaris-venv
  else
    echo "--> Repairing dependencies for the Python client..."
    rm -rf "${dir}/polaris-venv"
    python3 -m venv "${dir}"/polaris-venv
  fi

  source "${dir}"/polaris-venv/bin/activate

  echo "--> Upgrading pip in virtual environment..."
  pip install --upgrade pip
  
  echo "--> Installing test requirements (including Poetry) into virtual environment..."
  pip install -r "${dir}/regtests/requirements.txt"
  
  echo "--> Installing 'polaris' package using Poetry..."
  (cd "${dir}/client/python" && poetry install)

  deactivate

  if [ ! -d "${dir}/polaris-venv" ]; then
    echo "✅ First time setup complete."
  else
    echo "✅ Dependencies repaired."
  fi
fi

# --- Execution Logic ---

# Check if the correct virtual environment is already active, if not, activate it.
if [ -z "$VIRTUAL_ENV" ] || [ "$(realpath "$VIRTUAL_ENV")" != "$(realpath "${dir}/polaris-venv")" ]; then
  echo "--> Activating virtual environment for CLI execution: source ${dir}/polaris-venv/bin/activate"
  source "${dir}/polaris-venv/bin/activate"
fi

# Set SCRIPT_DIR to the project root for the Python CLI
export SCRIPT_DIR="${dir}"
echo "--> SCRIPT_DIR is set to: ${SCRIPT_DIR}"

echo "--> Running Polaris CLI..."
# Execute the 'polaris' command installed by Poetry within the venv
exec polaris "$@"
